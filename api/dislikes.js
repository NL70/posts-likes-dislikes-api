const express=require("express"),{pool}=require("../config"),dislikesRouter=express.Router({mergeParams:!0}),addDislikes=(a,b)=>{const c=a.params.postId,d=a.session.user.id;return c&&d?void pool.query("INSERT INTO dislikes (post_id, user_id) VALUES ($1, $2) RETURNING *",[c,d],(a,c)=>a?null!==a.constraint&&"dislikes_post_id_user_id_key"===a.constraint?void b.status(409).json({status:"error",message:"Post is already disliked"}):void b.status(500).json({status:"error",message:a.message}):void b.status(200).json({status:"Success",message:"Dislike added.",data:c.rows[0]})):void b.status(400).json({status:"error",message:"Post ID/User ID cannot be empty."})},deleteDislikes=(a,b)=>{const c=a.params.postId,d=a.session.user.id;return console.log("userId"),console.log(d),console.log("postId"),console.log(c),c&&d?void pool.query("DELETE FROM dislikes WHERE post_id = $1 AND user_id = $2",[c,d],(a,c)=>0===c.rowCount?void b.status(404).json({status:"error",message:"Post/User does not exist."}):a?void b.status(500).json({status:"error",message:a.message}):void b.status(204).json({status:"Success",message:"Dislike deleted."})):void b.status(400).json({status:"error",message:"Post ID/User ID cannot be empty."})};dislikesRouter.post("/",addDislikes),dislikesRouter.delete("/",deleteDislikes),module.exports=dislikesRouter;