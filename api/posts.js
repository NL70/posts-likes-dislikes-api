const express=require("express"),{pool}=require("../config"),postsRouter=express.Router(),getPosts=(a,b)=>{const c=a.session&&a.session.user&&a.session.user.id||null;pool.query(`SELECT posts.id, title, content, username,
    (SELECT COUNT(*) as like_count FROM likes WHERE post_id=posts.id),
    (SELECT COUNT(*) as dislike_count FROM dislikes WHERE post_id=posts.id),
    (SELECT (CASE WHEN likes.user_id IS NULL THEN FALSE ELSE TRUE END) as is_liked FROM likes WHERE post_id=posts.id AND user_id=$1),
    (SELECT (CASE WHEN dislikes.user_id IS NULL THEN FALSE ELSE TRUE END) as is_disliked FROM dislikes WHERE post_id=posts.id AND user_id=$1)
    FROM posts 
    JOIN users
    ON posts.user_id = users.id
    WHERE posts.id = posts.id;
    `,[c],(a,c)=>a?void b.status(500).json({status:"error",message:a.message}):void b.status(200).json({data:c.rows}))},addPosts=(a,b)=>{const{title:c,content:d}=a.body,e=a.session.user.id;return c&&d?void pool.query("INSERT INTO posts (title, content, user_id) VALUES ($1, $2, $3) RETURNING *",[c,d,e],(a,c)=>a?null!==a.constraint&&"posts_user_id_fkey"===a.constraint?void b.status(400).json({status:"error",message:"User does not exist"}):void b.status(500).json({status:"error",message:a.message}):void b.status(201).json({status:"Success",message:"Post added.",data:c.rows[0]})):void b.status(400).json({status:"error",message:"Title/Content cannot be empty."})},deletePosts=async(a,b)=>{const c=a.params.postId;try{await pool.query("BEGIN");const a=await pool.query("DELETE FROM likes WHERE post_id = $1;",[c]),d=await pool.query("DELETE FROM dislikes WHERE post_id = $1;",[c]),e=await pool.query("DELETE FROM posts WHERE id = $1;",[c]);await pool.query("COMMIT"),b.status(204).json()}catch(a){throw await pool.query("ROLLBACK"),a}};postsRouter.get("/",getPosts),postsRouter.post("/",addPosts),postsRouter.delete("/:postId",deletePosts);const likesRouter=require("./likes");postsRouter.use("/:postId/likes",likesRouter);const dislikesRouter=require("./dislikes");postsRouter.use("/:postId/dislikes",dislikesRouter),module.exports=postsRouter;