const express=require("express"),{pool}=require("../config"),likesRouter=express.Router({mergeParams:!0}),addLikes=(a,b)=>{console.log(a.params),console.log(a.session.user);const c=a.params.postId,d=a.session.user.id;return c&&d?void pool.query("INSERT INTO likes (post_id, user_id) VALUES ($1, $2) RETURNING *",[c,d],(a,c)=>a?null!==a.constraint&&"likes_post_id_user_id_key"===a.constraint?void b.status(409).json({status:"error",message:"Post is already liked"}):void b.status(500).json({status:"error",message:a.message}):void b.status(200).json({status:"Success",message:"Like added.",data:c.rows[0]})):void b.status(400).json({status:"error",message:"Post ID/User ID cannot be empty."})},deleteLikes=(a,b)=>{const c=a.params.postId,d=a.session.user.id;return c&&d?void pool.query("DELETE FROM likes WHERE post_id = $1 AND user_id = $2",[c,d],(a,c)=>0===c.rowCount?void b.status(404).json({status:"error",message:"Post/User does not exist."}):a?void b.status(500).json({status:"error",message:a.message}):void b.status(204).json({status:"Success",message:"Like deleted."})):void b.status(400).json({status:"error",message:"Post ID/User ID cannot be empty."})};likesRouter.post("/",addLikes),likesRouter.delete("/",deleteLikes),module.exports=likesRouter;