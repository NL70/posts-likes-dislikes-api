const express=require("express"),session=require("express-session"),bodyParser=require("body-parser"),cors=require("cors"),cookieParser=require("cookie-parser"),crypto=require("crypto"),{pool}=require("./config");require("dotenv").config();const app=express();if(app.use(bodyParser.json()),app.use(bodyParser.urlencoded({extended:!0})),app.use(cookieParser()),app.use(cors()),"production"!==process.env.NODE_ENV){const a=require("livereload"),b=require("connect-livereload"),c=a.createServer();c.watch(__dirname+"/public"),c.server.once("connection",()=>{setTimeout(()=>{c.refresh("/")},100)}),app.use(b())}app.use(session({resave:!1,saveUninitialized:!1,secret:"secret"})),app.use(express.static("public",{index:!1}));function redirectOnLogin(a,b,c){console.log(a.session.user),a.session.user?(console.log("redirect index"),b.redirect("/index.html")):(console.log("redirect login"),b.redirect("/login.html")),c()}app.get("/",redirectOnLogin),app.get("/login",redirectOnLogin);const postsRouter=require("./api/posts");app.use("/posts",postsRouter);const usersRouter=require("./api/users");app.use("/users",usersRouter);const getHashedPassword=a=>{const b=crypto.createHash("sha256"),c=b.update(a).digest("base64");return c};app.post("/login",(a,b)=>{const{username:c,password:d}=a.body;console.log(a.body),pool.query("SELECT * FROM users WHERE username = $1",[c],(e,f)=>{if(e)throw e;const g=f.rows[0],h=getHashedPassword(d);return g?g.password===h?void a.session.regenerate(()=>{a.session.user=g,b.status(201).send({data:g})}):void b.status(400).json({status:"error",message:"The username or password is invalid."}):void pool.query("INSERT INTO users (username, password) VALUES ($1, $2)",[c,h],c=>{if(c)throw c;const d=f.rows[0];a.session.regenerate(()=>{a.session.user=d,b.status(201).send({data:d})})})})});const port=process.env.PORT||5e3;app.listen(port,()=>{console.log(`Server listening at port ${port}`)});